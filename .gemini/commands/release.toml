# In: ~/.gemini/commands/release.toml
# Invoked via: /release 4.1.0

description = "发布新版本"
prompt = """

  核心任务: 你是一个负责执行标准化软件发布流程的工程助理。你需要严格按照以下步骤，为一个用户脚本项
  目发布一个新版本。

  版本信息:
   * 新版本号: {{args}}
   * 上一个版本号: [填写上一个版本号, 例如: 4.0.2]

  ---

  发布流程

  步骤 1: 更新版本号

   1. 定位文件: 目标文件是 S1Plus.user.js。
   2. 更新元数据: 将文件头部的 // @version 从 [上一个版本号] 修改为 {{args}}。
   3. 更新内部常量:
      * 将文件内的 const SCRIPT_VERSION 的值从 [上一个版本号] 修改为 {{args}}。
      * 将文件内的 SCRIPT_RELEASE_DATE 的值变为发布当天。

  注意: 必须同时修改这两处，以确保脚本的元数据和内部逻辑版本一致。

  步骤 2: 更新 CHANGELOG.md

   1. 读取文件: 在进行任何修改前，必须先使用 read_file 工具读取 CHANGELOG.md
      的完整内容，以理解其现有结构。

   2. 遵循格式:
       * 日志的顶部总会有一个空的 ## [Unreleased] 部分，用于收集未发布的更新。
       * 每个发布的版本（如 ## [v4.0.2] - YYYY-MM-DD）都是一个独立的二级标题。
       * 关键：在不同的版本标题之间，必须使用一条 --- 水平分割线隔开。

   3. 执行更新:
       * 在 ## [Unreleased] 标题下方，创建一个新的二级标题，格式为 ## [v{{args}}] - [当前日期]。
       * 将 ## [Unreleased] 下方的所有更新日志内容，剪切并粘贴到你刚刚创建的新版本标题下方。
       * 确保 ## [Unreleased] 部分最终只剩下标题，其下方内容为空。
       * 确保新的版本日志与上一个版本日志之间有 --- 分割线。

  步骤 3: 校准并刷新 README.md

   1. 读取文件: 首先，同时读取 S1Plus.user.js 和 README.md 的内容。
   2. 提取新元数据: 从 S1Plus.user.js 文件中，提取出更新后的完整元数据块。
   4. 校准核心信息: 将 README.md 的主标题和项目简介，与新元数据中的 @name 和 @description 的内容进行校准。这里的目标是确保说明文字准确反映脚本的**完整功能**，而不是罗列本次更新的增量。
   5. 覆盖文件: 修改后的新内容写回 README.md 文件。

  步骤 4: 提交发布变更

   1. 暂存文件: 使用 git add . 将所有修改过的文件（S1Plus.user.js、CHANGELOG.md 和 README.md）添加到暂存区。
   2. 检查历史: 使用 git log -n 3 查看最近的提交历史，以确认提交信息的风格。
   3. 提交变更: 使用 git commit 创建一个格式统一的发布提交。提交信息必须严格遵循以下格式：
   1     release: v{{args}}
      示例: git commit -m "release: v4.1.0"

  步骤 5: 创建 Git 标签

   1. 打上标签: 为刚刚的发布提交创建一个新的 Git 标签。标签名必须严格遵循以下格式：

   1     v{{args}}
      示例: git tag v4.1.0

  ---

  通用注意事项

   * 原子性操作: 严格按照顺序，一次执行一个步骤。在继续下一步之前，请确认上一步已成功完成。
   * 文件内容校验: 至关重要！在任何时候，当你需要修改一个文件时（尤其是 CHANGELOG.md），都必须先用
     read_file 读取其最新内容，然后再使用 write_file 或 replace
     进行修改。这可以防止因内容不同步而导致的操作失败。
   * 遵循约定: 严格遵守项目中既定的版本号格式、Changelog 格式、提交信息格式和标签格式。
   * 最终确认: 完成所有步骤后，向用户报告发布成功，并询问是否需要将提交和标签推送到远程仓库 (git push
      && git push --tags)。

"""